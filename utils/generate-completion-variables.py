#!/usr/bin/env python3

import re
import sys
import os
import argparse
import datetime


be_verbose = False

def verbose(msg):
    if be_verbose:
        print(msg, file=sys.stderr)

def get_django_version(working_command):
    output = os.popen(working_command + " version")
    for line in output:
        return line.strip()

def find_commands(working_command):
    verbose("Commands from: " + working_command)
    commands = []
    output = os.popen(working_command)
    for line in output:
        if not line.strip():
            continue
        matches = re.match("^(?P<command>[a-z_]+)$", line.strip())
        if matches:
            command = matches.group("command")
            verbose("Subcommand: " + command)
            commands.append(command)
    return commands

def find_options_for_command(working_command, subcommand):
    output = os.popen(working_command + " help " + subcommand)
    options = []
    for line in output:
        line = line.strip()
        matches = re.findall("\[([A-Za-z_-]+)?(?:\])?", line)
        if matches:
            for match in matches:
                verbose("Option for subcommand '" + subcommand + "': " + match)
                options.append(match)
    return list(set(options))

def find_commands_options(working_command, commands):
    options = {}
    for command in commands:
        options[command] = find_options_for_command(working_command, command)
    return options

def print_source_subcommands(subcommands, args):
    print(args.subcommands_var_name + "=\"" + " ".join(subcommands.keys()) + "\"")

def print_source_options_for_subcommand(subcommand, options, args):
    var_name = args.options_var_name
    print(var_name + "[" + subcommand + "]=\"" + " ".join(options) + "\"")

def print_source_options_for_subcommands(subcommands, args):
    for subcommand in subcommands:
        print_source_options_for_subcommand(subcommand, subcommands[subcommand], args)

def parse_options():
    parser = argparse.ArgumentParser()
    parser.add_argument("--command", dest='working_command')
    parser.add_argument("--subcommands-var-name", dest='subcommands_var_name')
    parser.add_argument("--options-var-name", dest='options_var_name')
    parser.add_argument("--verbose", dest='verbose', action='store_true')
    return parser.parse_args()

def check_arguments(args):
    global be_verbose
    be_verbose = args.verbose

def main():
    args = parse_options()
    check_arguments(args)
    commands = find_commands(args.working_command)
    commands_options = find_commands_options(args.working_command, commands)
    print("# Django's ./manage.py statically generated autocompletion source code.")
    print("# https://github.com/diegolagoglez/django-bash-completion.git -- Diego Lago <diego.lago.gonzalez@gmail.com>")
    print("# Generated by " + os.path.basename(sys.argv[0]) + " on " + \
        datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S%z") + " for Django version " + \
        get_django_version(args.working_command) + ".")
    print("")
    print_source_subcommands(commands_options, args)
    print("declare -A " + args.subcommands_var_name)
    print("")
    print_source_options_for_subcommands(commands_options, args)
    print("")

if __name__ == "__main__":
    main()
